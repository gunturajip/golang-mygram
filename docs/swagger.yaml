basePath: /
definitions:
  models.Comment:
    properties:
      created_at:
        type: string
      id:
        type: integer
      message:
        type: string
      photo_id:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.Photo:
    properties:
      caption:
        type: string
      created_at:
        type: string
      id:
        type: integer
      photo_url:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.Response:
    properties:
      data: {}
      error:
        type: string
      message:
        type: string
    type: object
  models.Socialmedia:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      social_media_url:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.User:
    properties:
      age:
        type: integer
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
host: golang-mygram-production.up.railway.app
info:
  contact:
    email: soberkoder@swagger.io
    name: API Support
  description: This is an Instagram Clone for CRUD-ing photos, and comments among
    users
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Mygram (Instagram Clone)
  version: "1.0"
paths:
  /comments:
    get:
      consumes:
      - application/json
      description: Get all comments data
      parameters:
      - description: Type Bearer your_token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: Get all comments
      tags:
      - comment
    post:
      consumes:
      - application/json
      description: Post details of a new comment based on current user and certain
        photo
      parameters:
      - description: Type Bearer your_token
        in: header
        name: Authorization
        required: true
        type: string
      - description: create a comment
        in: body
        name: models.Comment
        required: true
        schema:
          $ref: '#/definitions/models.Comment'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: Post a new comment
      tags:
      - comment
  /comments/{ID}:
    delete:
      consumes:
      - application/json
      description: Delete details of a comment corresponding to the input ID
      parameters:
      - description: Type Bearer your_token
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the comment
        in: path
        name: ID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: Delete comment details for a given ID
      tags:
      - comment
    get:
      consumes:
      - application/json
      description: Get details of a comment corresponding to the input ID
      parameters:
      - description: Type Bearer your_token
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the comment
        in: path
        name: ID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: Get comment details for the given ID
      tags:
      - comment
    put:
      consumes:
      - application/json
      description: Update details of a comment corresponding to the input ID
      parameters:
      - description: Type Bearer your_token
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the comment
        in: path
        name: ID
        required: true
        type: integer
      - description: update comment
        in: body
        name: models.Comment
        required: true
        schema:
          $ref: '#/definitions/models.Comment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: Update comment for the given ID
      tags:
      - comment
  /photos:
    get:
      consumes:
      - application/json
      description: Get all photos data
      parameters:
      - description: Type Bearer your_token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: Get all photos
      tags:
      - photo
    post:
      consumes:
      - application/json
      description: Post details of a new photo based on current user
      parameters:
      - description: Type Bearer your_token
        in: header
        name: Authorization
        required: true
        type: string
      - description: create a photo
        in: body
        name: models.Photo
        required: true
        schema:
          $ref: '#/definitions/models.Photo'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: Post a new photo
      tags:
      - photo
  /photos/{ID}:
    delete:
      consumes:
      - application/json
      description: Delete details of a photo corresponding to the input ID
      parameters:
      - description: Type Bearer your_token
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the photo
        in: path
        name: ID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: Delete photo details for a given ID
      tags:
      - photo
    get:
      consumes:
      - application/json
      description: Get details of a photo corresponding to the input ID
      parameters:
      - description: Type Bearer your_token
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the photo
        in: path
        name: ID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: Get photo details for the given photo ID
      tags:
      - photo
    put:
      consumes:
      - application/json
      description: Update details of a photo corresponding to the input ID
      parameters:
      - description: Type Bearer your_token
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the photo
        in: path
        name: ID
        required: true
        type: integer
      - description: update photo
        in: body
        name: models.Photo
        required: true
        schema:
          $ref: '#/definitions/models.Photo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: Update photo for the given ID
      tags:
      - photo
  /socialmedia:
    get:
      consumes:
      - application/json
      description: Get all social media data
      parameters:
      - description: Type Bearer your_token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: Get all social media
      tags:
      - social media
    post:
      consumes:
      - application/json
      description: Post details of a new social media based on current user
      parameters:
      - description: Type Bearer your_token
        in: header
        name: Authorization
        required: true
        type: string
      - description: create a social media
        in: body
        name: models.Socialmedia
        required: true
        schema:
          $ref: '#/definitions/models.Socialmedia'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: Post a new social media
      tags:
      - social media
  /socialmedia/{ID}:
    delete:
      consumes:
      - application/json
      description: Delete details of a social media corresponding to the input ID
      parameters:
      - description: Type Bearer your_token
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the social media
        in: path
        name: ID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: Delete social media details for a given ID
      tags:
      - social media
    get:
      consumes:
      - application/json
      description: Get details of a social media corresponding to the input ID
      parameters:
      - description: Type Bearer your_token
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the social media
        in: path
        name: ID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: Get social media details for the given ID
      tags:
      - social media
    put:
      consumes:
      - application/json
      description: Update details of a social media corresponding to the input ID
      parameters:
      - description: Type Bearer your_token
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the social media
        in: path
        name: ID
        required: true
        type: integer
      - description: update social media
        in: body
        name: models.Socialmedia
        required: true
        schema:
          $ref: '#/definitions/models.Socialmedia'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: Update social media for the given ID
      tags:
      - social media
  /users/login:
    post:
      consumes:
      - application/json
      description: Register an existing user using email, and password
      parameters:
      - description: login a user
        in: body
        name: models.User
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: Login an existing user
      tags:
      - user
  /users/register:
    post:
      consumes:
      - application/json
      description: Register a new user using email, username, and password
      parameters:
      - description: register a user
        in: body
        name: models.User
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: Register a new user
      tags:
      - user
swagger: "2.0"
